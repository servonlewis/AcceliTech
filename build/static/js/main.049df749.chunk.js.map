{"version":3,"sources":["redux/Parent-Component/logo.svg","redux/Actions/Types.js","redux/Parent-Component/App.js","redux/Actions/actions.js","serviceWorker.js","redux/Reducer/App-Reducer.js","redux/Store/configureStore.js","index.js"],"names":["module","exports","__webpack_require__","p","types","keyMirror","TEMPLATE_TEST","App","props","data","this","dispatch","type","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","connect","state","Object","objectSpread","Boolean","window","location","hostname","match","defaultState","me","appReducer","arguments","length","undefined","action","logger","createLogger","collapsed","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","HashRouter","Fragment","Route","exact","path","component","redux_Parent_Component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mSCMzBC,QAJDC,GAAU,CACpBC,cAAe,OCQbC,4LACcC,GCVU,IAAAC,EDY1BC,KAAKF,MAAMG,UCZeF,EDYiB,YCXpC,CACHG,KAAMR,EAAME,cACZG,KAAM,CACFA,4CDYR,OAASI,EAAAC,EAAAC,cAAA,OACHC,UAAY,OAChBH,EAAAC,EAAAC,cAAA,UACOC,UAAY,cACnBH,EAAAC,EAAAC,cAAA,OACIE,IACFC,IAEFF,UAAY,WACZG,IAAM,SACNN,EAAAC,EAAAC,cAAA,iBAEKF,EAAAC,EAAAC,cAAA,8BAFL,yBARA,IAWIF,EAAAC,EAAAC,cAAA,KACFC,UAAY,WACdI,KAAO,sBACPC,OAAS,SACTC,IAAM,uBAJF,gBAXJ,KAFO,YAPKC,aAsCHC,cALS,SAACC,EAAOjB,GAC9B,OAAOkB,OAAAC,EAAA,EAAAD,CAAA,GACFD,IAGQD,CAAyBjB,GErCpBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sGChBAC,EAAe,CACjBC,GAAI,QAgBOC,EAbI,WAAkC,IAAjCV,EAAiCW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,OAAQC,EAAO3B,MACX,KAAKR,EAAME,cACP,OAAOoB,OAAAC,EAAA,EAAAD,CAAA,GACAD,EADP,CAEIhB,KAAM8B,EAAO9B,KAAKA,SCN5B+B,EAASC,uBAAa,CACxBC,WAAW,IAQAC,EALDC,YACVC,EACAC,YAAgBC,IAAOP,ICF3BQ,IAASC,OACPpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUP,MAAOA,GACf9B,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,SAAP,KACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,SAAAhD,GAAK,OAAIK,EAAAC,EAAAC,cAAC0C,EAAD,YAIhDC,SAASC,eAAe,SHgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.049df749.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import keyMirror from 'keymirror'\r\n\r\nconst types = keyMirror({\r\n    TEMPLATE_TEST: null,\r\n}) // end types\r\n\r\nexport default types","import React, {\n  Component\n} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  connect\n} from 'react-redux';\nimport axios from 'axios'\nimport * as actions from '../Actions/actions'\n\nclass App extends Component {\n  componentDidMount(props) {\n\n    this.props.dispatch(actions.SampleFunction('some-data'))\n  }\n\n  render() {\n    return ( <\n      div className = \"App\" >\n      <\n      header className = \"App-header\" >\n      <\n      img src = {\n        logo\n      }\n      className = \"App-logo\"\n      alt = \"logo\" / >\n      <\n      p >\n      Edit < code > src / App.js < /code> and save to reload. <\n      /p> <\n      a className = \"App-link\"\n      href = \"https://reactjs.org\"\n      target = \"_blank\"\n      rel = \"noopener noreferrer\" >\n      Learn React <\n      /a> <\n      /header> <\n      /div>\n    ) // end Return\n  } // end Render\n} //end App\n\nconst mapStateToProps = (state, props) => {\n  return {\n    ...state\n  }\n}\nexport default connect(mapStateToProps)(App);","import types from '../Actions/Types'\r\n\r\nexport const SampleFunction = data => {\r\n    return {\r\n        type: types.TEMPLATE_TEST,\r\n        data: {\r\n            data\r\n        }\r\n    }\r\n} // end Sample","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from '../Actions/Types'\r\n\r\nconst defaultState = {\r\n    me: 'test'\r\n}\r\n\r\nconst appReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case types.TEMPLATE_TEST:\r\n            return {\r\n                ...state,\r\n                data: action.data.data\r\n            } // end return\r\n\r\n        default:\r\n            break;\r\n    } // end switch\r\n} // end reducer\r\n\r\nexport default appReducer","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport rootReducer from '../Reducer/App-Reducer';\r\n\r\nconst logger = createLogger({\r\n    collapsed: true\r\n})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk, logger)\r\n)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './redux/Parent-Component/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/Store/configureStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <React.Fragment>\n        <Route exact path='/' component={props => <App />} />\n      </React.Fragment>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}